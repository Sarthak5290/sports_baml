/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
const fileMap = {
  
  "clients.baml": "\r\nclient<llm> GPT4o {\r\n  provider openai\r\n  options {\r\n    model \"gpt-4o\"\r\n    temperature 0.7\r\n  }\r\n}\r\n\r\n\r\nclient<llm> Claude {\r\n  provider anthropic\r\n  options {\r\n    model \"claude-3-sonnet-20240229\"\r\n    max_tokens 4000\r\n  }\r\n}\r\n\r\nclient<llm> GPT4 {\r\n  provider openai\r\n  options {\r\n    model \"gpt-4\"\r\n    temperature 0.7\r\n  }\r\n}\r\n\r\nclient<llm> GPT35 {\r\n  provider openai\r\n  options {\r\n    model \"gpt-3.5-turbo\"\r\n    temperature 0.7\r\n  }\r\n}",
  "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"typescript\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.89.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode async\n}\n",
  "recipe.baml": "\r\nclass Ingredient {\r\n  name string\r\n  amount float?\r\n  unit string?\r\n}\r\n\r\nclass PartIngredient {\r\n  title string\r\n  ingredients Ingredient[]\r\n}\r\n\r\nclass PartSteps {\r\n  title string\r\n  steps string[]\r\n}\r\n\r\nclass Recipe {\r\n  number_of_servings int\r\n  ingredients (Ingredient | PartIngredient)[]\r\n  instructions (string | PartSteps)[]\r\n}\r\n\r\nfunction GetRecipe(query: string) -> Recipe {\r\n  client GPT4o\r\n  prompt #\"\r\n    Generate a detailed recipe for: {{query}}\r\n    \r\n    Return a Recipe object with:\r\n    - number_of_servings: How many servings this recipe makes\r\n    - ingredients: Either simple ingredients with name/amount/unit, or grouped ingredients with a title\r\n    - instructions: Either simple string steps, or grouped steps with a title\r\n    \r\n    Make sure to:\r\n    - Use appropriate measurements (cups, tablespoons, etc.)\r\n    - Group ingredients logically (e.g., \"For the sauce\", \"For the marinade\")\r\n    - Provide clear, step-by-step instructions\r\n    - Group instructions into logical sections when appropriate\r\n  \"#\r\n}",
  "resume.baml": "// Defining a data model.\r\nclass Resume {\r\n  name string\r\n  email string\r\n  experience string[]\r\n  skills string[]\r\n}\r\n\r\n// Create a function to extract the resume from a string.\r\nfunction ExtractResume(resume: string) -> Resume {\r\n  // Specify a client as provider/model-name\r\n  // you can use custom LLM params with a custom client name from clients.baml like \"client CustomHaiku\"\r\n  client \"openai/gpt-4o\" // Set OPENAI_API_KEY to use this client.\r\n  prompt #\"\r\n    Extract from this content:\r\n    {{ resume }}\r\n\r\n    {{ ctx.output_format }}\r\n  \"#\r\n}\r\n\r\n\r\n\r\n// Test the function with a sample resume. Open the VSCode playground to run this.\r\ntest vaibhav_resume {\r\n  functions [ExtractResume]\r\n  args {\r\n    resume #\"\r\n      Vaibhav Gupta\r\n      vbv@boundaryml.com\r\n\r\n      Experience:\r\n      - Founder at BoundaryML\r\n      - CV Engineer at Google\r\n      - CV Engineer at Microsoft\r\n\r\n      Skills:\r\n      - Rust\r\n      - C++\r\n    \"#\r\n  }\r\n}\r\n",
}
export const getBamlFiles = () => {
    return fileMap;
}